

Example steps to run each step of the pipeline sequentially. A single run is processed at a time this way.

# ----------------------------------------------------------------------------
# 1. Get ScanImage metadata from raw tiffs:
# ----------------------------------------------------------------------------
$ python preprocessing/get_scanimage_data.py -i<ANIMALID> -S<SESSIONID> -A<ACQUISITION> -r<RUNNAME>

# NOTES:
# This step will create .json containing acquisition info and tiff-page info for each file (.tif) in specified run.
# Meta info is saved to <rundir>/raw/ and all files in this dir are set to read-only.
# We create a hash (6-char) for the files in <rundir>/raw/ and rename the dir: <rundir>/raw_<HASHID>/


# ----------------------------------------------------------------------------
# 2. Set parameters for processing raw data (PID):
# ----------------------------------------------------------------------------
A particular processing parameter set (identified with processing ID, PID) specifies
which processing steps to complete. Any call to a processing script will "use-up" a 
given PID set, if provided in the call.

There are 4 preprocessing scripts that can be called:
a) correct_flyback.py
b) correct_bidir.py
c) correct_motion.py
d) process_raw.py

Since a processing parameter set assumes options provided for each of these 3 processing steps (flyback correction, bidirectional scan correction, motion correction), script (d) is the main processing script that should be called for any given PID, especially if multiple preprocessing steps will be run.
 
$ python set_pid_params.py -i<ANIMALID> -S<SESSIONID> -A<ACQUISITION> -r<RUNNAME> -sraw -traw --bidi --flyback -F<NFLYBACKFRAMES> --motion -M<MCMETHOD> -a<MCALGORITHM>

$ python preprocessing/process_raw.py -i<ANIMALID> -S<SESSIONID> -A<ACQUISITION> -r<RUNNAME> -p<PIDHASH> --zproject


NOTES:
- Add the --default flag to just use default MC settings (-M'Acquisition2P' -a'@withinFile_withinFrame_lucasKanade'.
- This step will print the PIDHASH (6-char) identifying the parameter set to use for processing steps.
- The process ID params ("PID" params) are stored temporarily in <rundir>/processed/tmp_pids/tmp_pid_<PIDHASH>.json
- Add --zproj flag to include mean images for each step


WARNING:  (a)-(c) can each be called from the command line (use flag -h to get user-provided opts) without previously creating a PID. A default PID will be created automatically in the 'processed/tmp_pids' folder with the opts provided. Successful completion of the script will move the temporarily-created PID to a 'processed/tmp_pids/completed' subfolder, after which point it cannot be re-used. If using one of (a)-(c) with a specific PID, successful completion of the called processing script will also result in moving the user-specified PID file to the 'processed/tmp_pids/completed' folder.

For sub-steps (2.a)-(2.c), if a PID is provided, parameters specified there take priority. If no PID is provided and any of these scripts are called on their own, user should provide options (do python <script>.py -h to see opts), or else a default PID will be created with relevant fields set to False/None.

# ----------------------------------------------------------------------------
# 2.a. Do flyback correction on raw data to extract data-only frames from raw:
# ----------------------------------------------------------------------------
$ python preprocessing/correct_flyback.py -i<ANIMALID> -S<SESSIONID> -A<ACQUISITION> -r<RUNNAME> --flyback -F<N flyback frames to remvove from top of volume>

NOTES:
- Blank frames specified during acquisition by SI will automatically be removed.. Use -h for details.
- This step also assumes that flyback-correction is being done on raw tiffs found in <rundir>/raw_<hashid>/

# ----------------------------------------------------------------------------
# 2.b. Do bidirectional-scan phase correction:
# ----------------------------------------------------------------------------
$ python preprocessing/correct_bidirscan.py -i<ANIMALID> -S<SESSIONID> -A<ACQUISITION> -r<RUNNAME> --bidi

NOTES:
- Since bidi can be performed on a "raw" (raw acquisitions) or "processed" tiff (e.g., flyback-corrected "raw" tiffs, motion-correction tiffs), you should specify (if not providing PID):
    *TIFFSOURCE (i.e., -t'raw' or -t'processed001'), and
    *SOURCETYPE (i.e., -s'bidi', -s'mcorrected', -s'raw')
- Add flag --default  to run without interactive mode.  Default will process on raw data (-t'raw', -s'raw').
- This script uses Matlab, so REPO_PATH and CVX_PATH should be set if non-default paths are used

# ----------------------------------------------------------------------------
# 2.c. Do motion correction:
# ----------------------------------------------------------------------------
$ python preprocessing/correct_motion.py -i<ANIMALID> -S<SESSIONID> -A<ACQUISITION> -r<RUNNAME> -p<PIDHASH> 

- NOTES:
- Since bidi can be performed on a "raw" (raw acquisitions) or "processed" tiff (e.g., flyback-corrected "raw" tiffs, motion-correction tiffs), you should specify (if not providing PID):
    *TIFFSOURCE (i.e., -t'raw' or -t'processed001'), and
    *SOURCETYPE (i.e., -s'bidi', -s'mcorrected', -s'raw')
- Add flag --default  to run without interactive mode.  Default will process on raw data (-t'raw', -s'raw'), and will use default motion-correction algorithms.
- This script uses Matlab, so REPO_PATH and CVX_PATH should be set if non-default paths are used


# ----------------------------------------------------------------------------
# 3. Evaluate motion-correction:
# ----------------------------------------------------------------------------
$ python evaluate_motion_correction.py -i<ANIMAL_ID> -S<SESSION> -A<ACQUISITION> -P<PROCESS_ID>

NOTES:
- PROCESS_ID is the name of the process ID that called the motion-correction to be evaluated (not the process_hash, but rather 'processed001'). The script will look for a subfolder called 'mcorrected_<mcfiles_hash>' within the process_id folder specified


# ----------------------------------------------------------------------------
# 4. Set ROI extraction params (RID):
# ----------------------------------------------------------------------------
$ python set_roi_params.py -i<ANIMALID> -S<SESSIONID> -A<ACQUISITION> -s<TIFFSOURCE> -t<SOURCETYPE -o<ROITYPE>

# NOTES:
# TIFFSOURCE should be 'raw' or 'processed00X', where X is one of the processed dirs.
# SOURCETYPE should be 'raw', 'bidi', or 'mcorrected'
# Add flag --default if want to run without interactive params and use default params where missing.


# ----------------------------------------------------------------------------
# 7. Extract ROIs:
# ----------------------------------------------------------------------------
$ python rois/get_rois_caiman.py -i<ANIMALID> -S<SESSIONID> -A<ACQUISITION> -r<RUNNAME> -p<RIDHASH> -o<ROITYPE>

# NOTES:
# If no RID is specified (Step 6), need to provide input params:
#   TIFFSOURCE should be 'raw' or 'processed00X', where X is one of the processed dirs.
#   SOURCETYPE should be 'raw', 'bidi', or 'mcorrected'
#   --default, if not interactive mode, and using defaults (raw tiffs, default ROI params, etc.)
# Add flag --default if want to run without interactive params and use default params where missing.



