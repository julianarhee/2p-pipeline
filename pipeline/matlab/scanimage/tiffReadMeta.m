function varargout = tiffReadMeta(fPath, castType, isSilent)
%[origtiff, siHeader] = tiffReadMeta(fPath, castType, isSilent)
% [img, metadata] = tiffRead(fPath, castType, isSilent)

%turn off warning thrown by reading in scanImage3 files
warning('off','MATLAB:imagesci:tiffmexutils:libtiffWarning'),

if ~exist('castType', 'var') || isempty(castType)
    castType = 'double';
end

if ~exist('isSilent', 'var') || isempty(isSilent)
    isSilent = false;
end

% Gracefully handle missing extension:
if exist(fPath, 'file') ~= 2
    if exist([fPath, '.tif'], 'file')
        fPath = [fPath, '.tif'];
    elseif exist([fPath, '.tiff'], 'file')
        fPath = [fPath, '.tiff'];
    else
        error(['Could not find ' fPath '.'])
    end
end

% Create Tiff object:
t = Tiff(fPath);

% if nargout>1
%     % Get number of directories (= frames):
%     t.setDirectory(1);
%     while ~t.lastDirectory
%         t.nextDirectory;
%     end
%     nDirectories = t.currentDirectory;
% 
%     % Load all directories (= frames):
%     img = zeros(t.getTag('ImageLength'), ...
%         t.getTag('ImageWidth'), ...
%         nDirectories, ...
%         castType);
% 
%     for i = 1:nDirectories
%         t.setDirectory(i);
%         img(:,:,i) = t.read;
% 
%         if ~isSilent && ~mod(i, 200)
%             fprintf('%1.0f frames of %d loaded.\n', i, nDirectories);
%         end
%     end
% 
%     varargout{1} = img;
% end
%varargout{1} = img;
% rescale if needed?
% scale_vec = [2 1 1];
% T = maketform('affine',[scale_vec(1) 0 0; 0 scale_vec(2) 0; 0 0 scale_vec(3); 0 0 0;]);
% R = makeresampler({'cubic','cubic','cubic'},'fill');
% ImageScaled = tformarray(img,T,R,[1 2 3],[1 2 3], size(img).*scale_vec,[],0);

% varargout{1} = img;

%turn back on warning to avoid conflicts later
warning('on','MATLAB:imagesci:tiffmexutils:libtiffWarning'),

% Scanimage metadata: Tiffs saved by Scanimage contain useful metadata in
% form of a struct. This data can be requested as a second output argument.
if nargout >= 1
    % Check if this Tiff has valid scanimage metadata and get version:
    try
        imgDesc = t.getTag('ImageDescription');
    catch
        imgDesc = [];
    end
    if isempty(imgDesc)
        scanImageVersion = -1;
    else
        if ~isempty(strfind(imgDesc, 'scanimage'))
            scanImageVersion = 4;
        elseif ~isempty(strfind(imgDesc, 'state.'))
            scanImageVersion = 3;
        elseif ~isempty(strfind(imgDesc, 'dcOverVoltage'))
            scanImageVersion = 2016;
        else
            scanImageVersion = -1;
        end
    end
    
    switch scanImageVersion
        case 3
            lineDesc = regexp(imgDesc,'state.','start');
            lineDesc(end+1) = length(imgDesc)+1;
            for e = 1:length(lineDesc)-1
                eval([imgDesc(lineDesc(e):lineDesc(e+1)-2) ';']);
            end
            varargout{2} = state;
        case 4
            imgDescC = regexp(imgDesc, 'scanimage\..+? = .+?(?=\n)', 'match');
            imgDescC = strrep(imgDescC, '<nonscalar struct/object>', 'NaN');
            imgDescC = strrep(imgDescC, '<unencodeable value>', 'NaN');
            for e = imgDescC;
                eval(['s.' e{:} ';']);
            end
            varargout{2} = s.scanimage;
        case 2016
            if nargout>1
                fprintf('Reading all tiff headers from original tiffs.\n');
                siHeader = scanimage.util.opentif(fPath);
            else
                fprintf('Only getting tiff headers from first.\n');
                siHeader = opentifmeta(fPath);
            end
            varargout{2} = siHeader;
            %tiffmeta = siHeader;
        case -1
            % Not a scanimage file. Since a second output argument was
            % requested, we use a fake scanimage metadata to make the Acq2P
            % object work with non-scanimage tiffs:
            varargout{2} = createScanimageMetadataStruct;
            warning('Could not find scanimage metadata in raw tiff file. Using fake metadata generated by createScanimageMetadataStruct.m');
    end
end

% Close:
t.close();
